name: Publish

# Manual trigger with version input
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.2.3 - no v prefix)'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode (test without publishing)'
        required: false
        type: boolean
        default: false

# Required permissions for version commits, tags, releases, and npm provenance
permissions:
  contents: write
  id-token: write

jobs:
  # Job 1: Validate input and create version commit
  create-version-commit:
    name: Create Version Commit
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.commit.outputs.sha }}
    steps:
      - name: Check dry run mode
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN MODE ENABLED - No changes will be pushed to remote"
            echo "================================================"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "::error title=Invalid Version Format::Version must be in X.Y.Z format (e.g., 1.2.3). Got: $VERSION"
            exit 1
          fi
          echo "✓ Version format valid: $VERSION"

      - name: Check for existing tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "::error title=Tag Already Exists::Tag v$VERSION already exists. Please use a different version number."
            exit 1
          fi
          echo "✓ Tag v$VERSION does not exist"

      - name: Check for dirty working directory
        run: |
          if ! git diff-index --quiet HEAD --; then
            echo "::error title=Uncommitted Changes::Working directory has uncommitted changes. Please commit or stash them first."
            git status
            exit 1
          fi
          echo "✓ Working directory is clean"

      - name: Update package.json version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Updating package.json to version $VERSION"
          npm version $VERSION --no-git-tag-version
          echo "✓ package.json updated to version $VERSION"

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create version commit
        id: commit
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git add package.json
          git commit -m "chore(release): bump version to $VERSION"

          COMMIT_SHA=$(git rev-parse HEAD)
          echo "sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "✓ Version commit created: $COMMIT_SHA"

      - name: Push version commit
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN: Would push version commit to remote"
            echo "   Commit SHA: $(git rev-parse HEAD)"
            echo "   Branch: $(git branch --show-current)"
          else
            git push origin HEAD
            echo "✓ Version commit pushed to remote"
          fi

  # Job 2: Create and push version tag
  create-version-tag:
    name: Create Version Tag
    runs-on: ubuntu-latest
    needs: create-version-commit
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.dry_run == 'true' && github.ref || needs.create-version-commit.outputs.commit_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Update package.json version (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Updating package.json to version $VERSION (dry run)"
          npm version $VERSION --no-git-tag-version
          echo "✓ package.json updated to version $VERSION"

      - name: Create and push tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN: Would create and push tag v$VERSION"
            echo "   Current commit: $(git rev-parse HEAD)"
          else
            git tag "v$VERSION"
            git push origin "v$VERSION"
            echo "✓ Tag v$VERSION created and pushed"
          fi

  # Job 3: Publish to NPM
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [create-version-commit, create-version-tag]
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.dry_run == 'true' && github.ref || needs.create-version-commit.outputs.commit_sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Update package.json version (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Updating package.json to version $VERSION (dry run)"
          npm version $VERSION --no-git-tag-version
          echo "✓ package.json updated to version $VERSION"

      - name: Build library
        run: yarn prepare

      - name: Verify build outputs
        run: |
          echo "Verifying build outputs..."
          test -d lib/module || (echo "::error::lib/module directory not found" && exit 1)
          test -d lib/typescript || (echo "::error::lib/typescript directory not found" && exit 1)
          test -d nitrogen/generated || (echo "::error::nitrogen/generated directory not found" && exit 1)
          echo "✓ All build outputs verified"

      - name: Publish to NPM
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN: Testing NPM publish..."
            npm publish --dry-run --access public
            echo "✓ Dry run completed - package would be published to NPM registry"
          else
            echo "Publishing to NPM with provenance..."
            npm publish --provenance --access public
            echo "✓ Package published to NPM registry"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 4: Create GitHub Release with changelog
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [create-version-commit, publish-npm]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.dry_run == 'true' && github.ref || needs.create-version-commit.outputs.commit_sha }}

      - name: Generate Release Notes
        id: release_notes
        run: |
          set -e  # Exit on error

          VERSION="${{ github.event.inputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --exclude="v$VERSION" 2>/dev/null || echo "")

          # Send debug output to stderr to avoid polluting release notes
          echo "Generating release notes for v$VERSION..." >&2
          echo "Previous tag: $PREVIOUS_TAG" >&2

          # Get merged PRs since last tag
          if [ -n "$PREVIOUS_TAG" ]; then
            PREVIOUS_DATE=$(git log -1 --format=%aI "$PREVIOUS_TAG" 2>/dev/null)
            echo "Getting PRs merged after $PREVIOUS_DATE..." >&2
            # Limit to 50 PRs and suppress any extra output
            PRS=$(gh pr list --state merged --search "merged:>$PREVIOUS_DATE" --limit 50 --json number,title,author --jq '.[] | "- #\(.number) \(.title) (@\(.author.login))"' 2>&1 | grep "^-" || echo "")
          else
            echo "No previous tag found, getting all merged PRs..." >&2
            # Limit to 50 PRs and suppress any extra output
            PRS=$(gh pr list --state merged --limit 50 --json number,title,author --jq '.[] | "- #\(.number) \(.title) (@\(.author.login))"' 2>&1 | grep "^-" || echo "")
          fi

          # Create release notes in a clean way
          {
            echo "## What's Changed"
            echo ""
            if [ -n "$PRS" ]; then
              echo "$PRS"
            else
              echo "- No merged PRs found"
            fi
            echo ""
            echo "## Installation"
            echo ""
            echo '```bash'
            echo "npm install react-native-nitro-device-info@$VERSION"
            echo "# or"
            echo "yarn add react-native-nitro-device-info@$VERSION"
            echo '```'
            echo ""
            echo "## Documentation"
            echo ""
            echo "- [README](https://github.com/l2hyunwoo/react-native-nitro-device-info#readme)"
            echo ""
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "**Full Changelog**: https://github.com/l2hyunwoo/react-native-nitro-device-info/compare/$PREVIOUS_TAG...v$VERSION"
            else
              echo "**Full Changelog**: https://github.com/l2hyunwoo/react-native-nitro-device-info/commits/v$VERSION"
            fi
          } > release_notes.md

          # Output the release notes to GitHub output
          {
            echo "release_notes<<RELEASE_NOTES_EOF"
            cat release_notes.md
            echo "RELEASE_NOTES_EOF"
          } >> $GITHUB_OUTPUT

          echo "✓ Release notes generated" >&2
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          body: ${{ steps.release_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Release Notes (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🔍 DRY RUN: Would create GitHub release with the following notes:"
          echo "---"
          cat release_notes.md
          echo "---"
